#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 6.0.1
#  in conjunction with Tcl version 8.6
#    Jan 21, 2021 01:19:34 AM CET  platform: Windows NT


##DURING DEVELOPMENT##

import sys
import os
import time
import sys
import glob
import shutil
import zipfile
import os,os.path,sys
import fnmatch
from tkinter import *
try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk
from tkinter import filedialog
try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True
from tkinter import messagebox
from tkinter import filedialog
from tkinter import ttk
from os.path import join
from time import sleep
import zipfile
import paramiko
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import requests
import webbrowser
import functools
import threading
import queue
import asynctkinter as at
from pathlib import Path
at.patch_unbind()

def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    # rt = root
    root = rt
    w = tk.Toplevel(root)
    top = Toplevel1(w)
    init(w, top, *args, **kwargs)
    return (w, top)

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Toplevel1(root)
    init(root, top)
    root.mainloop()
    w = None

def init(top, gui, *args, **kwargs):

    global w, top_level, root
    w = gui
    top_level = top
    root = top

class Toplevel1:

    def popupmsg(self, msg):

        popup = tk.Tk()
        popup.overrideredirect(2)

        popup.title("ERROR")
        popup.geometry('200x100')
        popup.resizable(False, False)
        label = ttk.Label(popup, text=msg)
        label.grid(row=1)
        label.pack(side="top", fill="x", pady=(15,30))
        B1 = ttk.Button(popup, text="OK", command=popup.destroy)
        B1.pack()
        popup.mainloop()


    def destroy_Toplevel1(self):
        global w
        w.destroy()
        w = None

    def do_folder_check(self):
        if os.path.isfile(self.filename + '\\AssettoCorsa.exe'):
            print('AC.EXE EXIST')
            return True
        else:
            print("AC.EXE MISSING")
            return False


# downloader def
    def path(self):
        self.filename = filedialog.askdirectory(title = "Znajdź folder AC")

        if self.filename == '':
            pass
        else:
            result = self.do_folder_check()
            if result is True:
                #result = do_folder_check(self.filename)
                if len(self.filename) >= 67:
                    lenghts = len(self.filename)
                    to_remove = int(lenghts) - 67 + 5
                    self.string = '...' + self.filename[to_remove:]
                else:
                    self.string = self.filename
            else:
                #wyrzuć okno z napisem "W folderze nie istnieje AssettoCorsa.exe"
                self.popupmsg("HALO EKIPA NIE DZIALA")
                raise Exception('FUCK YOU')

            self.SelectedGameFilePath.configure(text=self.string, background="green", foreground="#000000")
            self.ButtonDownloadAPP.configure(state=NORMAL)
            self.ButtonDownloadCSP.configure(state=NORMAL)
            self.ButtonDownload.configure(state=NORMAL)
        return self.filename

    def scan(self):
        print('SolACapp_support.scan')
        ll = list(os.listdir(self.filename))
        if ll == '':
            pass
        else:
            self.TCombobox1.configure(values = ll)
        return ll
        sys.stdout.flush()


    def paramiko_connect(self, mode):

        paramiko.util.log_to_file("paramiko.log")
        transport = paramiko.Transport('188.227.170.152', 22)
        # Auth
        username, password = "Administrator", "SOLxAC2021!"
        transport.connect(None, username, password)
        # Go!
        sftp = paramiko.SFTPClient.from_transport(transport)
        # Download
        if mode == 'download':
            remoteFilePath1 = "C:\\Users\\Administrator\\Downloads\\do acapp\\assettocorsa\\apps.zip"
            remoteFilePath2 = "C:\\Users\\Administrator\\Downloads\\do acapp\\assettocorsa\\content.zip"
            remoteFilePath3 = "C:\\Users\\Administrator\\Downloads\\do acapp\\assettocorsa\\extension.zip"
            localFilePath = self.filename
            return remoteFilePath1, remoteFilePath2, remoteFilePath3, localFilePath, sftp
        if mode == 'upload':
            remoteSkinPath = "C:\\Program Files (x86)\\Steam\\steamapps\\common\\Assetto Corsa Dedicated Server\\content\\cars\\"
            return remoteSkinPath, sftp


    def unpack(self, remoteFilePath1, remoteFilePath2, remoteFilePath3, localFilePath):
        with zipfile.ZipFile(localFilePath + "\\apps.zip", 'r') as zip_ref:
            zip_ref.extractall(localFilePath)
            print ("ściągnięto 1")
        with zipfile.ZipFile(localFilePath + "\\content.zip", 'r') as zip_ref:
            zip_ref.extractall(localFilePath)
            print("ściągnięto 2")
        with zipfile.ZipFile(localFilePath + "\\extension.zip", 'r') as zip_ref:
            zip_ref.extractall(localFilePath)
            print("ściągnięto 3")
        os.remove(localFilePath + "\\apps.zip")
        print("delete1")
        os.remove(localFilePath + "\\content.zip")
        print("delete2")
        os.remove(localFilePath + "\\extension.zip")
        print("delete3")
        print("DONE")

    def download(self):
        remoteFilePath1, remoteFilePath2, remoteFilePath3, localFilePath, sftp = self.paramiko_connect(mode='download')
        def my_callback(filename, bytes_so_far, bytes_total):
            print('Transfer of %r is at %d/%d Mb (%.1f%%)' % (
                filename, bytes_so_far / 1024 / 1024, bytes_total / 1024 / 1024, (100. * bytes_so_far / bytes_total)))

        callback_for_filename = functools.partial(my_callback, remoteFilePath1)
        sftp.get(remoteFilePath1, localFilePath + '/apps.zip', callback=callback_for_filename)

        callback_for_filename = functools.partial(my_callback, remoteFilePath2)
        sftp.get(remoteFilePath2, localFilePath + '/content.zip', callback=callback_for_filename)

        callback_for_filename = functools.partial(my_callback, remoteFilePath2)
        sftp.get(remoteFilePath3, localFilePath + '/extension.zip', callback=callback_for_filename)
        self.unpack(remoteFilePath1, remoteFilePath2, remoteFilePath3, localFilePath)


    def on_url_click(self):
        url = 'https://acstuff.ru/s/dXIe1w'
        webbrowser.open(url)

    def apppreset(self):
        app = 'C:\\Users\\MSI\\Downloads\\1.cmpreset' # docelowo z serwera
        destinationapp =(os.path.expandvars('%localappdata%\AcTools Content Manager\Presets\In-Game Apps'))
        shutil.copy(app, destinationapp)
        print('ściągnięto')

#uploader def

    def fun(self,*args):
        print("changed 1-st combobox value to: " + self.DropDown.get())
        self.DropDown.current(0)
        return self.DropDown.get()

    def search(self):
        self.filenameup = filedialog.askopenfilename(initialdir="w", title="Wybierz skin", filetypes=(("zip Archive", "*.zip*"), ("all files", "*.*")))
        if len(self.filenameup) >= 67:
            lenghts = len(self.filenameup)
            to_remove = int(lenghts) - 67 + 5
            self.string = '...' + self.filenameup[to_remove:]
        else:
            self.string = self.filenameup
        if self.filenameup == '':
            pass
        else:
            self.SelectedFilePath.configure(text=self.string, background="green", foreground="#000000")

    def scancar(self):
        remoteSkinPath, sftp = self.paramiko_connect(mode='upload')

        print('SolACapp_support.scan')
        self.ll = list(sftp.listdir(remoteSkinPath))  # lista samochodów z serwera
        if self.ll == '':
            pass
        else:
            self.DropDown.configure(values=self.ll)
            self.DropDown.current(0)
        return self.ll

    def upload(self):
        remoteSkinPath, sftp = self.paramiko_connect(mode='upload')
        self.pattern = '*.zip*'
        self.sources = self.filenameup
        filetitle = os.path.splitext(self.sources)[0]
        os.mkdir(filetitle + '1')
        self.newcarfolder = filetitle + '_temp'
        with zipfile.ZipFile(self.sources, 'r') as zip_ref:
            zip_ref.extractall(self.newcarfolder)
            print("rozpakowano")
        self.newcarfolder15 = "1\\" + Path(filetitle).stem
        #print("folder15=" + self.newcarfolder15)
        self.newcarfolder2 = filetitle + "1\\szlosek"  # bez znaczenia czy bedzie szlosek czy nie: jest to jako folder roboczy
        #print(self.newcarfolder2)
        self.destination = remoteSkinPath
        #print(self.destination)
        self.Filetitle2 = Path(filetitle).stem
        #print('filetitle2=' + self.Filetitle2)
        self.destination = self.destination + self.DropDown.get() + '\\skins\\'
        #print(self.destination)
        self.destination2 = self.destination + self.Filetitle2
        sftp.mkdir(self.destination2)
        print("wysyłanie skórki. prosze czekać....")
        # sorce - sciezka do folderu lokalnie do skopowiania (szlosek) jesli w sciezce pojawia sie plik zamiast sorce -> miejsce z plikami ze skina target -> sciezka gdzie wyslam
        for item in os.listdir(self.newcarfolder2):
            if os.path.isfile(os.path.join(self.newcarfolder2, item)):
                sftp.put(os.path.join(self.newcarfolder2, item), '%s/%s' % (self.destination2, item))
            else:
                sftp.mkdir('%s/%s' % (self.destination2, item), ignore_existing=True)
                sftp.put_dir(os.path.join(self.newcarfolder2, item), '%s/%s' % (self.destination2, item))

        # def my_callback(newcarfolder2, bytes_so_far, bytes_total):
        # print('Transfer of %r is at %d/%d Mb (%.1f%%)' % (
        # newcarfolder2, bytes_so_far / 1024 / 1024, bytes_total / 1024 / 1024, (100. * bytes_so_far / bytes_total)))

        print("Wysłano skórke")

    def done(self):
        self.destroy_window()

    def destroy_window(self):
        # Function whpoich closes the window.
        global top_level
        top_level.destroy()
        top_level = None

    def __init__(self, top=None):
        self.queue = queue
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor, font="TkDefaultFont", foreground=_fgcolor)
        self.style.map('.',background=[('selected', _compcolor), ('active',_ana2color)])
        top.geometry("600x600")
        top.minsize(600, 600)
        top.resizable(False, False)
        top.title("SolAC")
        top.configure(background="#d9d9d9", highlightbackground="#d9d9d9", highlightcolor="black")
        self.style.configure('TNotebook.Tab', background=_bgcolor, foreground=_fgcolor)
        self.style.map('TNotebook.Tab', background=[('selected', _compcolor), ('active',_ana2color)])
        self.TNotebook1 = ttk.Notebook(top)
        self.TNotebook1.place(relx=0.0, rely=0.0, relheight=0.993, relwidth=1.007)
        self.TNotebook1.configure(takefocus="")

##FRAME DEFINITION
        self.TNotebook1_Download = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_Download, padding=3)
        self.TNotebook1.tab(0, text="Download",compound="left",underline="-1",)
        self.TNotebook1_Download.configure(background="#b3f1ff", highlightbackground="#d9d9d9", highlightcolor="black")
        self.TNotebook1_Upload = tk.Frame(self.TNotebook1)
        self.bg = tk.PhotoImage(file='bg.png')
        self.background_label = tk.Label(self.TNotebook1_Upload, image=self.bg)
        self.background_label.place(x=0, y=0, relwidth=1, relheight=1)
        self.TNotebook1.add(self.TNotebook1_Upload, padding=3)
        self.bg_download = tk.PhotoImage(file='bg.png')
        self.TNotebook1.tab(1, text="Upload",compound="left",underline="-1",)
        self.background_label = tk.Label(self.TNotebook1_Download, image=self.bg_download)
        self.background_label.place(x=0, y=0, relwidth=1, relheight=1)
        self.TNotebook1.add(self.TNotebook1_Download, padding=3)
        self.TNotebook1.tab(1, text="Upload", compound="left", underline="-1", )

##DOWNLOADER

        self.MessagePodajsciezkeDownloader = tk.Message(self.TNotebook1_Download)
        self.MessagePodajsciezkeDownloader.place(rely=0.2, relheight=0.05, relwidth=1)
        self.MessagePodajsciezkeDownloader.configure(width=600, text='''Podaj ścieżke do AC:''')

        self.ButtonsciezkaAC = tk.Button(self.TNotebook1_Download)
        self.ButtonsciezkaAC.place(relx=0.66, rely=0.3, height=30, width=150)
        self.ButtonsciezkaAC.configure(command=self.path, text='Znajdź')

        self.SelectedGameFilePath = tk.Label(self.TNotebook1_Download)
        self.SelectedGameFilePath.place(relx=0.08, rely=0.3, height=30, width=330)
        self.SelectedGameFilePath.configure(text='')

        self.MessageskanDownloader = tk.Message(self.TNotebook1_Download)
        self.MessageskanDownloader.place(relx=0.08, rely=0.4, height=30, width=330)
        self.MessageskanDownloader.configure(width=330, text='''Przeskanuj w poszukiwaniu nowych plików''')

        self.ButtonSkanDownloader = tk.Button(self.TNotebook1_Download)
        self.ButtonSkanDownloader.place(relx=0.66, rely=0.4, height=30, width=150)
        self.ButtonSkanDownloader.configure(command=self.scan, text='Skanuj')



        self.TProgressSkanDownloader = ttk.Progressbar(self.TNotebook1_Download)
        self.TProgressSkanDownloader.place(relx=0.08, rely=0.55, width=500, relheight=0.0, height=22)
        self.TProgressSkanDownloader.configure(length="500")

        self.MessagePoSkanieDownloader = tk.Message(self.TNotebook1_Download)
        self.MessagePoSkanieDownloader.place(relx=0.08, rely=0.6, height=50, width=500)
        self.MessagePoSkanieDownloader.configure(text='Brakuje ci xxx plików', width=500)

        self.ButtonDownload = tk.Button(self.TNotebook1_Download)
        self.ButtonDownload.place(relx=0.33, rely=0.7, height=42, width=200)
        self.ButtonDownload.configure(text='Ściągnij brakujące pliki', command=self.download, state=DISABLED)

        self.ButtonDownloadCSP = tk.Button(self.TNotebook1_Download)
        self.ButtonDownloadCSP.place(relx=0.6, rely=0.83, height=42, width=167)
        self.ButtonDownloadCSP.configure(text='Ściągnij preset CSP', command=self.on_url_click, state=DISABLED)

        self.ButtonDownloadAPP = tk.Button(self.TNotebook1_Download)
        self.ButtonDownloadAPP.place(relx=0.1, rely=0.83, height=42, width=167)
        self.ButtonDownloadAPP.configure(text='Ściągnij preset APP', command=self.apppreset, state=DISABLED)


##UPLOADER

        self.Messageuploadwaring = tk.Message(self.TNotebook1_Upload)
        self.Messageuploadwaring.place(rely=0.2, relheight=0.05, relwidth=1)
        self.Messageuploadwaring.configure(width=440, text='Wgraj swojego skina pamiętając o poprawej nazwie')

        self.DropDown = ttk.Combobox(self.TNotebook1_Upload)
        self.DropDown.place(relx=0.1, rely=0.29, height=25, width=375)
        self.DropDown.configure(textvariable="lista_samochodow")
        self.DropDown.configure(values='')

        self.ButtonSkanDownloader = tk.Button(self.TNotebook1_Upload)
        self.ButtonSkanDownloader.place(relx=0.75, rely=0.29, height=25, width=100)
        self.ButtonSkanDownloader.configure(command=self.scancar, text='''Skanuj''')

        self.SelectedFilePath = tk.Label(self.TNotebook1_Upload)
        self.SelectedFilePath.place(relx=0.1, rely=0.38, height=25, width=375)
        self.SelectedFilePath.configure(text='')

        self.Buttonskinuploader = tk.Button(self.TNotebook1_Upload)
        self.Buttonskinuploader.place(relx=0.75, rely=0.38, height=25, width=100)
        self.Buttonskinuploader.configure(command=self.search, text='Szukaj...')

        self.TProgressbarUploader = ttk.Progressbar(self.TNotebook1_Upload)
        self.TProgressbarUploader.place(relx=0.08, rely=0.73, width=500, relheight=0.0, height=22)
        self.TProgressbarUploader.configure(length="450")

        self.ButtonUploaderWgraj = tk.Button(self.TNotebook1_Upload)
        self.ButtonUploaderWgraj.place(relx=0.33, rely=0.8, height=45, width=200)
        self.ButtonUploaderWgraj.configure(text='Wgraj')
        self.ButtonUploaderWgraj.configure(command=self.upload)


if __name__ == '__main__':
    vp_start_gui()





